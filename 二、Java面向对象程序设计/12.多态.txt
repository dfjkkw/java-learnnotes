**多态的概念

多态的概念：通俗的讲，就是多种形态，具体点就是去完成某个行为，当不同的对象去完成时会产生出不同的状态。
总的来说：同一件事，发生在不同对象身上，就会产生不同的结果。

**多态实现条件

##在Java中要实现多态，必须满足如下几个条件，缺一不可。
----1.必须在继承体系下
----2.子类必须要对父类的方法进行重写
----3.通过父类的引用调用重写的方法

测试实例：
class Animal{
    protected String name;
    private int age;
    public Animal(String name,int age){
        this.name=name;
        this.age=age;
    }
    public void eat(){
        System.out.println(name+"吃饭！");
    }
}
class Dog extends Animal{
    public Boolean silly;
    public Dog(String name,int age,Boolean silly){
        super(name,age);
        this.silly=silly;
    }
    public void houseGuard(){
        System.out.println(name+"正在看家护院！");
    }
    //1.方法名称相同
    //2.返回值相同
    //3.参数列表相同（数据类型，个数，顺序均相同）
    //子类的访问权限大于等于父类的访问权限
    public void eat(){
        System.out.println(name+" 正在吃狗粮！！");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog=new Dog("旺财",12,false);
        dog.eat();
    }
}
//测试结果：
//旺财 正在吃狗粮！！

**重写

##重写（override）：也称覆盖。重写是子类对父类非静态，非private，非final方法的实现过程进行重新编写，返回值（JDK7以后，被重写的方法返回值类型
可以不同，但是必须是具有父子关系的）和形参都不能改变。即外壳不变，核心重写。

##【方法重写的规则】：
----1.子类在重写父类的方法时，一般必须与父类方法原型一致：修饰符 返回值类型 方法名(参数列表) 要完全一致
----2.JDK7以后，被重写的方法返回值类型可以不同，但是必须是具有父子关系的。
----3.访问权限不能比父类中被重写的方法的访问权限更低。
----4.父类被static、private final修饰的方法不能被重写。
----5.重写的方法加上@Override可以在子类中的重写方法与父类中的方法不同时给予提示
被final修饰的方法被称为密封方法

##静态绑定
静态绑定也称为前期绑定(早绑定)，即在编译时，根据用户所传递实参类型就确定了具体调用那个方法，典型代表函数重载。
##动态绑定
动态绑定也成为后期绑定(晚绑定)，即在编译时，不能确定方法的行为，需要等到程序运行时，才能够确定具体调用那个类的方法。

##重写和重载的区别
----1.重载
--重载的参数列表是必须修改的，而返回值类型，访问限定符是可以修改的
--重载是静态绑定，即在编译时就根据实参类型确定了调用哪个方法。
----2.重写
--重写的参数列表，返回类型（可以是父子类），访问限定符（不能更严厉），一般是不能修改的。
--重写是动态绑定，即在编译时不能确定具体的调用方法，而在程序运行时，才能确定具体的被调用的方法。
--即：方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现


**向上转型和向下转型

##向上转型
----向上转型：实际就是创建一个子类对象，将其当成父类对象来使用
----语法格式：父类类型 对象名=new 子类类型()
----使用场景：1.直接赋值。2.方法传参。3.方法返回。

测试实例：
class Animal{
    protected String name;
    private int age;
    public Animal(String name,int age){
        this.name=name;
        this.age=age;
    }
    public void eat(){
        System.out.println(name+"吃饭！");
    }
}
class Dog extends Animal{
    public Boolean silly;
    public Dog(String name,int age){
        super(name,age);
    }
    public Dog(String name,int age,Boolean silly){
        super(name,age);
        this.silly=silly;
    }
    public void houseGuard(){
        System.out.println(name+"正在看家护院！");
    }
    public void eat(){
        System.out.println(name+" 正在吃狗粮！！");
    }
}
class Cat extends Animal{
    public Cat(String name,int age){
        super(name, age);
    }
}

public class Main {
        //2.方法传参：形参为父类型引用，可以接收任意子类的对象
        public static void eatFood(Animal a){
            a.eat();
        }
        //3.做返回值，返回任意子类对象
        public static  Animal buyAnimal(String var){
            if("狗"==var){
                return new Dog("狗狗",1);
            }else if("猫"==var){
                return new Cat("猫猫",1);
            }else{
                return null;
            }
        }

        public static void main(String[] args) {
            Animal cat=new Cat("元宝",2);
            Animal dog=new Dog("小七",1);
            eatFood(cat);
            eatFood(dog);
            Animal animal=buyAnimal("狗");
            animal.eat();
            Animal animal2=buyAnimal("猫");
            animal2.eat();
        }
}
//测试结果：
//元宝吃饭！
//小七 正在吃狗粮！！
//狗狗 正在吃狗粮！！
//猫猫吃饭！！

----向上转型的优点：让代码实现更简单灵活
----向上转型的转型：不能调用到子类特有的方法
	
##向下转型
将一个子类对象经过向上转型之后当成父类方法使用，再无法调用子类的方法，但有时候可能需要调用子类特有的
方法，此时：将父类引用再还原为子类对象即可，即向下转型。

测试实例：
class Animal{
    protected String name;
    private int age;
    public Animal(String name,int age){
        this.name=name;
        this.age=age;
    }
    public void eat(){
        System.out.println(name+"吃饭！");
    }
}
class Dog extends Animal{
    public Boolean silly;
    public Dog(String name,int age){
        super(name,age);
    }
    public Dog(String name,int age,Boolean silly){
        super(name,age);
        this.silly=silly;
    }
    public void houseGuard(){
        System.out.println(name+"正在看家护院！");
    }
    public void eat(){
        System.out.println(name+" 正在吃狗粮！！");
    }
}
class Cat extends Animal{
    public Cat(String name,int age){
        super(name, age);
    }
}

public class Main {
        //2.方法传参：形参为父类型引用，可以接收任意子类的对象
        public static void eatFood(Animal a){
            a.eat();
        }
        //3.做返回值，返回任意子类对象
        public static  Animal buyAnimal(String var){
            if("狗"==var){
                return new Dog("狗狗",1);
            }else if("猫"==var){
                return new Cat("猫猫",1);
            }else{
                return null;
            }
        }

        public static void main(String[] args) {
            Animal animal=new Dog("小七",1);
            //animal是否引用了Dog对象
            if(animal instanceof Dog) {
                Dog dog=(Dog) animal;
                dog.eat();
            }
    }
}
//测试结果：
//小七 正在吃狗粮！！
	
**多态的优缺点

##使用多态的优点

----能够降低代码的圈复杂度

我对于圈复杂的理解就是，一段代码的复杂程度
如果描述事情，用很多的条件分支或者循环语句，这就理解比较复杂。
我们一个尽量让代码更容易理解，平铺直叙一些，这就可以考虑使用多态

比如这个例子，描述图形的，这里只写了几种图形还看不出什么，如果写的特别多的情况下，用分支语句显然就不合适了
class Shape {
 
    public void draw(){
        System.out.println("画图形！");
    }
}
class Rect extends Shape{
    @Override
    public void draw() {
        System.out.println("♦");
    }
}
class Cycle extends Shape{
    @Override
    public void draw() {
        System.out.println("●");
    }
}
}
public class Test02 {
    public static void drawMap(Shape shape) {
        shape.draw();
    }
    public static void main(String[] args) {
        Rect rect = new Rect();
        Cycle cycle =new Cycle();
        drawMap(rect);
        drawMap(cycle);
    }
}

----可扩展性强
比如说给这个里面再添加一种图形
使用多态 ，只需添加就可以了

测试实例：
class Triamgle extends Shape{
   @Override
    public void draw(){
        System.out.println("🔺");
    }
}

而如果使用分支语句的话，那就要重新考虑判断条件了，可能之前写的都要修改，比较麻烦
优点主要就是这两个，其实还有一些别的优点，比如：

----接口性，可替换性 ... ... 

##多态的缺点：
代码的运行效率降低。

**避免在构造方法中调用重写的方法
一段有坑的代码，我们创建两个类，B是父类，D是子类，D中重写func方法，并且在B的构造方法中调用func函数
测试实例：
class B{
    public B(){
        func();
    }
    public void func(){
        System.out.println("B.func()");
    }
}
class D extends  B{
    private int num=1;

    @Override
    public void func() {
        System.out.println("D.func()"+num);
    }
}
public class Main {
     public static void main(String[] args) {
        D d=new D();
    }
}
//测试结果：
//D.func()0

----构造D对象的同时，会调用B的构造方法
----B的构造方法中调用了func方法，此时会触发动态绑定，会调用到D中的func
----此时D对象自身还没有构造，此时num处在未初始化的状态，值为0.如果具备多态性，num的值应该是1.
----所以在构造函数内，尽量避免使用实例方法，除了final和private方法。

结论：“用尽量简单的方式使对象进入可工作状态”，尽量不要在构造器方法中调用方法(如果这个方法被子类重写，就会触)
发动态绑定，但是此时子类对象还没构造完成），可能会出现一些隐藏的但是又极难发现的问题。