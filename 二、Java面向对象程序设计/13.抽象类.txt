**抽象类

##抽象类概念
----在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，
如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。，
----在打印图形例子中，我们发现，父类的Shape中的draw方法好像并没有实际工作，主要的绘制图形都是由Shape
的各种子类的draw方法来实现的。像这种没有实际工作的方法，我们可以把它设计成一个抽象方法(abstract  method)，
包含抽象方法的类我们称为抽象类(abstract  class)。

##抽象类语法
----在Java中，一个类如果被abstract修饰为抽象类，抽象类中被abstract修饰的方法称为抽象方法，抽象方法不用给出具体的类实现。

//抽象类：被abstract修饰的类
abstract class Shape{
    //抽象方法：被abstract修饰的方法，没有方法体
    abstract public void draw();
    abstract void calcArea();
    //抽象类也是类，也可以增加普通方法和属性
    public double getArea(){
        return area;
    }
    protected double area;//面积
}

----注意：抽象类也是类，内部可以包含普通方法和属性，甚至构造方法

##抽象类特性
----1.抽象类使用abstract修饰类
----2.抽象类当中可以包含普通类所包含的成员
----3.抽象类和普通类不一样的是抽象类当中可以包含抽象方法
----4.抽象方法是使用abstract修饰的。这个方法没有具体的实现
----5.不能实例化抽象类 new
----6.抽象列存在的最大的意义就是为了被继承
----7.如果一个普通类继承了一个抽象类 此时必须重写抽象类当中的方法
----8.如果一个抽象类A继承了一个抽象类B，此时A当中不需要重写B中的抽象方法。但是如果A再被普通类继承，
就需要重写。
----9，抽象方法不能是私有的。static？也就是要满足重写的规则。
----10.final可以吗？不可以 他和abstract是矛盾的。
----11.抽象类当中 可以有构造方法。为了方便子类能够调用，来初始化抽象类当中的成员

测试实例：
abstract class B{
    public abstract void func();
}
abstract class A extends B{
    public abstract void func2();
}
class C extends A{

    @Override
    public void func() {

    }

    @Override
    public void func2() {

    }
}

public class Main {
     public static void main(String[] args) {
        C c=new C();
        c.func();
        c.func2();
    }
}

##抽象类的作用
----抽象类本身不能被实例化，要想使用，只能创建该抽象类的子类，然后让子类重写抽象类中的抽象方法
----确实如此，但是使用抽象类相当于多了一重编译器的校验。
----使用抽象类的场景就如上面的代码，实际工作不应该由父类完成，而应该由子类完成。那么此时如果不
小心误用成父类了，使用普通类编译器是不会报错的，但是父类是抽象类就会在实例化的时候提示错误，让
我们尽早发现问题。