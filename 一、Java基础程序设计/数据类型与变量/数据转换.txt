**类型转换

Java作为一个强类型编程语言，当不同类型之间的变量相互赋值时，会有较严格的校验。

代码示例：
public class Test {
    public static void main(String[] arg)
    {
        int a=10;//4
        long b=100L;//8
        b=a;//可以编译
        System.out.println(b);
        //a=b;//编译失败不兼容的类型: 从long转换到int可能会有损失
        a=(int)b;//可以编译
        System.out.println(a);
    }
}

在Java中，当参与运算数据类型不一致时，会进行类型转换。Java中类型转换主要分为两类：自动类型转
换(隐式)和强制类型转换(显式)。

1.自动类型转换(隐式)

自动类型转换即：代码不需要经过任何处理，在代码编译时，编译器会自动进行处理。
特点：数据范围小的转为数据范围大时会自动进行。

2.强制类型转换(显式)

强制类型转换即：当进行操作时，代码需要经过一定格式的处理，不能自动完成。
特点：数据范围大的到数据范围小的。

代码示例：
public class Test {
    public static void main(String[] arg)
    {
        int a=10;
        long b=100;
        b=a;//int->long 数据范围由小到大，隐式转换
        a=(int)b;//long->int 数据范围由大到小，需要强转，否则编译失败

        float f=3.14f;
        double d=5.12;
        d=f;//float->double 数据范围由小到大，隐式转换
        f=(float)d;//double->float 数据范围由大到小，需要强转，否则编译失败

        //a=d;//不兼容的类型: 从double转换到int可能会有损失
        a=(int)d;//int没有double表示的数据范围大，需要强转，小数点之后全部丢弃

        byte b1=100;// 100默认为int，没有超过byte范围，隐式转换
        //byte b3=257;//不兼容的类型: 从int转换到byte可能会有损失
        byte b2=(byte)257;//257默认为int，超过byte范围，需要显示转换，否则报错

        boolean flag=true;
        //a=true;//编译报错，不兼容的类型: boolean无法转换为int
        //true=a;//编译报错，意外的类型 需要: 变量 找到:    值
    }
}

注意事项：
1.不同数字类型的变量之间赋值，表示范围更小的类型能隐式转换成范围较大的类型。
2.如果需要把范围大的类型赋值给范围小的，需要强制类型转换，但是可能精度丢失。
3.将一个字面值常量进行赋值时，Java会自动针对数字范围进行检查。
4.强制类型转换不一定成功，不相干的类型不能相互转换。

**类型提升

不同类型的数据之间相互运算时，数据类型小的会被提升到数据类型大的。
1.int与long 之间：int 会被提升为long

代码示例：
public class Test {
    public static void main(String[] arg)
    {
        int a=10;
        long b=20;
        //int c=a+b;//编译出错，不兼容的类型: 从long转换到int可能会有损失
        long d=a+b;
    }
}

2.byte与byte的运算

代码示例：
public class Test {
    public static void main(String[] arg)
    {
        byte a=127;
        byte b=127;
        //当参与运算的数据小于4个字节时,会进行提升
        //byte c=a+b;//不兼容的类型: 从int转换到byte可能会有损失
        byte c=(byte)(a+b);
        int d=a+b;
        System.out.println(c);//-2,a,b较小时可以正常输出
        System.out.println(d);//254
    }
}

类型提升小结：
1.不同类型的数据混合运算，范围小的提升成范围大的。
2.对于short、byte这种比4个字节的int,再运算。